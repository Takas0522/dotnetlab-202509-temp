name: AI Answer on Discussion 

on:
  discussion:
    types: [created]

jobs:
  ai-answer:
    runs-on: ubuntu-latest

    permissions:
      discussions: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl
          
      - name: Collect Code Context
        run: |
          echo "Collecting code context..."
          mkdir -p context
          
          # プロジェクト構造を収集
          echo "=== PROJECT STRUCTURE ===" > context/code_context.txt
          find src -type f \( -name "*.cs" -o -name "*.ts" -o -name "*.js" -o -name "*.json" -o -name "*.sql" -o -name "*.md" \) | head -20 >> context/code_context.txt
          
          echo -e "\n=== CODE CONTENT ===" >> context/code_context.txt
          
          # 重要なファイルを優先して収集（安全にファイル内容を処理）
          find src -type f \( -name "*.cs" -o -name "*.ts" -o -name "*.js" \) | head -10 | while read -r file; do
            if [ -f "$file" ]; then
              echo -e "\n--- $file ---" >> context/code_context.txt
              # ファイル内容を安全に処理（特殊文字をエスケープ）
              head -n 30 "$file" | sed 's/`/\\`/g' | sed 's/\$/\\$/g' >> context/code_context.txt 2>/dev/null || true
            fi
          done
          
          # ファイルサイズを制限（4KB以内）
          if [ -f context/code_context.txt ]; then
            head -c 4000 context/code_context.txt > context/code_summary.txt
            echo "Code context collected. Size: $(wc -c < context/code_summary.txt) bytes"
          else
            echo "No code context available" > context/code_summary.txt
          fi

      - name: Call Azure OpenAI API
        id: ai
        run: |
          # 環境変数の確認
          echo "Checking environment variables..."
          echo "AZURE_OPENAI_ENDPOINT: ${AZURE_OPENAI_ENDPOINT:0:20}..."
          echo "AZURE_OPENAI_DEPLOYMENT: $AZURE_OPENAI_DEPLOYMENT"
          echo "AZURE_OPENAI_API_VERSION: $AZURE_OPENAI_API_VERSION"
          echo "DISCUSSION_TITLE: ${DISCUSSION_TITLE:0:50}..."
          echo "DISCUSSION_BODY length: ${#DISCUSSION_BODY}"
          
          # コードコンテキストを安全に読み取り（Broken pipeを回避）
          if [ -f context/code_summary.txt ]; then
            CODE_CONTEXT=$(cat context/code_summary.txt)
            echo "Code context loaded. Length: ${#CODE_CONTEXT}"
          else
            CODE_CONTEXT="No code context available"
            echo "No code context file found"
          fi
          # Discussion内容をエスケープして安全にする
          DISCUSSION_BODY_SAFE=$(echo "$DISCUSSION_BODY" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | tr -d '\000-\037' | tr '\n' ' ' | tr '\r' ' ')
          DISCUSSION_TITLE_SAFE=$(echo "$DISCUSSION_TITLE" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | tr -d '\000-\037' | tr '\n' ' ' | tr '\r' ' ')
          CODE_CONTEXT_SAFE=$(echo "$CODE_CONTEXT" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | tr -d '\000-\037' | tr '\n' ' ' | tr '\r' ' ')

          echo "Escaped Issue Body length: ${#DISCUSSION_BODY_SAFE}"
          echo "Escaped Code Context length: ${#DISCUSSION_TITLE_SAFE}"

          # API呼び出し用のJSONペイロードを安全に構築
          echo "Creating JSON payload..."
          SYSTEM_MSG="あなたは提供されたソースコードを詳細に分析し、具体的で実践的な解決策を提供するコード解析アシスタントです。必ず以下のルールに従って回答してください：1. 提供されたコードコンテキストを最優先で参照し、そのコードベースに基づいた具体的な解決策を提案する 2. 一般的な回答ではなく、実際のファイル名、クラス名、メソッド名を使用して具体的に説明する 3. コードの変更が必要な場合は、変更すべき具体的なファイルと行を指定する 4. 既存のアーキテクチャやパターンに合わせた解決策を提案する 5. 日本語で回答する コードコンテキストが提供されていない場合のみ、一般的なアドバイスを提供してください。"
          USER_MSG="【Discussion】タイトル: $DISCUSSION_TITLE_SAFE 内容: $DISCUSSION_BODY_SAFE 【提供されたコードコンテキスト】$CODE_CONTEXT_SAFE 【指示】上記のコードコンテキストを詳細に分析し、discussionの内容に対して以下の観点から具体的な回答を提供してください：1. 提供されたコードの中で関連する部分の特定 2. 問題の原因分析（該当するファイル名・クラス名・メソッド名を明記）3. 具体的な修正方法（どのファイルのどの部分をどう変更するか）4. 変更後のコード例（可能であれば）5. 注意点や関連する影響範囲 必ず提供されたコードコンテキストに基づいて回答し、一般論ではなく、このプロジェクト特有の具体的な解決策を提示してください。"
          
          # jqを使用して安全なJSON構築
          JSON_PAYLOAD=$(jq -n \
            --arg system_msg "$SYSTEM_MSG" \
            --arg user_msg "$USER_MSG" \
            '{
              "messages": [
                {"role": "system", "content": $system_msg},
                {"role": "user", "content": $user_msg}
              ],
              "max_tokens": 800,
              "temperature": 0.3
            }')
          
          echo "JSON payload created successfully"
          echo "Payload length: ${#JSON_PAYLOAD}"
          
          # API呼び出し（レスポンス処理を改善）
          echo "Calling Azure OpenAI API..."
          echo "URL: https://$AZURE_OPENAI_ENDPOINT/openai/deployments/$AZURE_OPENAI_DEPLOYMENT/chat/completions?api-version=$AZURE_OPENAI_API_VERSION"
          
          # レスポンスとHTTPステータスコードを分離して取得
          HTTP_CODE=$(curl -s -o response.json -w "%{http_code}" -X POST \
            "https://$AZURE_OPENAI_ENDPOINT/openai/deployments/$AZURE_OPENAI_DEPLOYMENT/chat/completions?api-version=$AZURE_OPENAI_API_VERSION" \
            -H "Content-Type: application/json" \
            -H "api-key: $AZURE_OPENAI_API_KEY" \
            -d "$JSON_PAYLOAD")
          
          curl_exit_code=$?
          echo "curl command completed with exit code: $curl_exit_code"
          
          if [ $curl_exit_code -ne 0 ]; then
            echo "curl command failed with exit code: $curl_exit_code"
            exit $curl_exit_code
          fi
          
          echo "HTTP Status Code: $HTTP_CODE"
          
          # レスポンス内容をログ出力（デバッグ用）
          echo "Raw response:"
          if [ -f response.json ]; then
            head -c 500 response.json
          else
            echo "No response file found"
          fi
          
          # HTTPステータスコードをチェック
          if [ "$HTTP_CODE" -ne 200 ]; then
            echo "API call failed with HTTP code: $HTTP_CODE"
            echo "Response:"
            cat response.json 2>/dev/null || echo "No response content"
            exit 1
          fi
          
          # JSONレスポンスの妥当性をチェック
          if ! jq empty response.json 2>/dev/null; then
            echo "Invalid JSON response"
            echo "Response content:"
            cat response.json 2>/dev/null || echo "No response content"
            exit 1
          fi
          
          # JSONレスポンスの処理
          if jq -e '.choices[0].message.content' response.json > /dev/null 2>&1; then
            AI_CONTENT=$(jq -r '.choices[0].message.content' response.json)
            echo "$AI_CONTENT" > ai_response.txt
            echo "response<<EOF" >> $GITHUB_OUTPUT
            echo "$AI_CONTENT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "Failed to extract content from API response"
            echo "Response:"
            cat response.json 2>/dev/null || echo "No response content"
            exit 1
          fi
        env:
          AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }} # 例: https://<your-resource-name>.openai.azure.com
          AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
          AZURE_OPENAI_DEPLOYMENT: ${{ secrets.AZURE_OPENAI_DEPLOYMENT }} # Azureで作成したモデルのデプロイ名
          AZURE_OPENAI_API_VERSION: "2025-01-01-preview"
          DISCUSSION_TITLE: ${{ github.event.discussion.title }}
          DISCUSSION_BODY: ${{ github.event.discussion.body }}

      - name: Post AI Response as Comment
        run: |
            gh api repos/${{ github.repository }}/discussions/${{ github.event.discussion.number }}/comments \
              -f body="${{ steps.ai.outputs.response }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}